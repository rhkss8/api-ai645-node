generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RecommendationHistory {
  id         String                 @id @default(cuid())
  round      Int?
  numbers    Json
  type       RecommendationType
  conditions Json?
  imageData  Json?
  gptModel   String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  analysis   String?
  userId     String?
  user       User?                  @relation(fields: [userId], references: [id])
  reviews    RecommendationReview[]

  @@map("recommendation_history")
}

model RecommendationReview {
  id               String                @id @default(cuid())
  recommendationId String
  winningNumbers   Json
  matchedCounts    Json
  reviewText       String
  analysisPrompt   String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  recommendation   RecommendationHistory @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("recommendation_review")
}

model WinningNumbers {
  id                 String   @id @default(cuid())
  round              Int      @unique
  numbers            Json
  drawDate           DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  bonusNumber        Int
  firstWinningAmount BigInt

  @@map("winning_numbers")
}

model ApiUsage {
  id           String   @id @default(cuid())
  endpoint     String
  gptModel     String?
  tokenUsed    Int?
  cost         Float?
  responseTime Int?
  success      Boolean  @default(true)
  errorMessage String?
  userIp       String?
  createdAt    DateTime @default(now())

  @@map("api_usage")
}

model IPLimitRecord {
  id              String   @id @default(cuid())
  ipAddress       String   @unique
  lastRequestDate String
  requestCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([ipAddress, lastRequestDate])
  @@map("ip_limit_records")
}

model User {
  id              String                  @id @default(cuid())
  nickname        String                  @db.VarChar(40)
  createdAt       DateTime                @default(now())
  deletedAt       DateTime?
  role            UserRole                @default(USER)
  termsAgreed     Boolean                 @default(false)
  privacyAgreed   Boolean                 @default(false)
  marketingAgreed Boolean                 @default(false)
  posts           BoardPost[]
  orders          Order[]
  recommendations RecommendationHistory[]
  refreshTokens   RefreshToken[]
  socialAccounts  SocialAccount[]
  subscriptions   Subscription[]

  @@map("users")
}

model SocialAccount {
  id           String       @id @default(cuid())
  userId       String
  provider     AuthProvider
  providerUid  String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUid])
  @@map("social_accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AccessTokenBlacklist {
  jti       String   @id
  expiresAt DateTime

  @@map("access_token_blacklist")
}

model Order {
  id           String        @id @default(cuid())
  userId       String
  merchantUid  String        @unique
  orderName    String        @default("로또 추천 서비스")
  amount       Int
  currency     String        @default("KRW")
  status       OrderStatus   @default(PENDING)
  description  String?
  metadata     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment      Payment?

  @@index([userId])
  @@index([merchantUid])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String        @unique
  impUid       String        @unique
  pgProvider   String
  payMethod    String
  amount       Int
  currency     String        @default("KRW")
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?
  rawResponse  Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([impUid])
  @@index([status])
  @@index([paidAt])
  @@map("payments")
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String
  type      SubscriptionType
  status    String           @default("active")
  startDate DateTime         @default(now())
  endDate   DateTime
  autoRenew Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model BoardPost {
  id          String        @id @default(cuid())
  category    BoardCategory
  title       String        @db.VarChar(200)
  content     String
  authorName  String        @db.VarChar(40)
  authorId    String?
  isImportant Boolean       @default(false)
  viewCount   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  author      User?         @relation(fields: [authorId], references: [id])

  @@index([category])
  @@index([isImportant])
  @@index([createdAt])
  @@index([authorId])
  @@map("board_posts")
}

enum RecommendationType {
  FREE
  PREMIUM
}

enum AuthProvider {
  EMAIL
  KAKAO
  GOOGLE
  NAVER
}

enum UserRole {
  USER
  ADMIN
}

enum BoardCategory {
  NOTICE
  SUGGESTION
  PARTNERSHIP
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  USER_CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  USER_CANCELLED
  REFUNDED
}

enum SubscriptionType {
  MONTHLY
  YEARLY
  LIFETIME
}
