const { Client } = require('pg');

async function createCloudTypeDatabase() {
  console.log('üîß ÌÅ¥ÎùºÏö∞ÎìúÌÉÄÏûÖ PostgreSQL ÏÑ§Ï†ï ÏãúÏûë...');

  // 1. postgres Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞Ìï¥ÏÑú main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±
  const postgresClient = new Client({
    host: 'svc.sel5.cloudtype.app',
    port: 31473,
    user: 'root',
    password: 'tarscase12!@',
    database: 'postgres'
  });

  try {
    await postgresClient.connect();
    console.log('‚úÖ postgres Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞ ÏÑ±Í≥µ');

    // main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±
    try {
      await postgresClient.query('CREATE DATABASE main');
      console.log('‚úÖ main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å');
    } catch (error) {
      if (error.code === '42P04') {
        console.log('‚ö†Ô∏è  main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§');
      } else {
        throw error;
      }
    }

    await postgresClient.end();

    // 2. main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞Ìï¥ÏÑú Ïä§ÌÇ§Îßà Ï†ÅÏö©
    const mainClient = new Client({
      host: 'svc.sel5.cloudtype.app',
      port: 31473,
      user: 'root',
      password: 'tarscase12!@',
      database: 'main'
    });

    await mainClient.connect();
    console.log('‚úÖ main Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞ ÏÑ±Í≥µ');

    // 3. Prisma Ïä§ÌÇ§ÎßàÎ•º Í∏∞Î∞òÏúºÎ°ú ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    const createTablesSQL = `
      -- Users ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."users" (
        "id" TEXT NOT NULL,
        "nickname" VARCHAR(40) NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "deletedAt" TIMESTAMP(3),
        "role" "public"."UserRole" NOT NULL DEFAULT 'USER',
        "termsAgreed" BOOLEAN NOT NULL DEFAULT false,
        "privacyAgreed" BOOLEAN NOT NULL DEFAULT false,
        "marketingAgreed" BOOLEAN NOT NULL DEFAULT false,
        CONSTRAINT "users_pkey" PRIMARY KEY ("id")
      );

      -- SocialAccount ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."social_accounts" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "provider" "public"."AuthProvider" NOT NULL,
        "providerUid" TEXT NOT NULL,
        "accessToken" TEXT,
        "refreshToken" TEXT,
        "expiresAt" TIMESTAMP(3),
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "social_accounts_pkey" PRIMARY KEY ("id")
      );

      -- RefreshToken ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."refresh_tokens" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "tokenHash" TEXT NOT NULL,
        "expiresAt" TIMESTAMP(3) NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "refresh_tokens_pkey" PRIMARY KEY ("id")
      );

      -- AccessTokenBlacklist ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."access_token_blacklist" (
        "jti" TEXT NOT NULL,
        "expiresAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "access_token_blacklist_pkey" PRIMARY KEY ("jti")
      );

      -- Order ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."orders" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "merchantUid" TEXT NOT NULL,
        "orderName" TEXT NOT NULL DEFAULT 'Î°úÎòê Ï∂îÏ≤ú ÏÑúÎπÑÏä§',
        "amount" INTEGER NOT NULL,
        "currency" TEXT NOT NULL DEFAULT 'KRW',
        "status" "public"."OrderStatus" NOT NULL DEFAULT 'PENDING',
        "description" TEXT,
        "metadata" JSONB,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "orders_pkey" PRIMARY KEY ("id")
      );

      -- Payment ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."payments" (
        "id" TEXT NOT NULL,
        "orderId" TEXT NOT NULL,
        "impUid" TEXT NOT NULL,
        "pgProvider" TEXT NOT NULL,
        "payMethod" TEXT NOT NULL,
        "amount" INTEGER NOT NULL,
        "currency" TEXT NOT NULL DEFAULT 'KRW',
        "status" "public"."PaymentStatus" NOT NULL DEFAULT 'PENDING',
        "paidAt" TIMESTAMP(3),
        "rawResponse" JSONB,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "payments_pkey" PRIMARY KEY ("id")
      );

      -- Subscription ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."subscriptions" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "type" "public"."SubscriptionType" NOT NULL,
        "status" TEXT NOT NULL DEFAULT 'active',
        "startDate" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "endDate" TIMESTAMP(3) NOT NULL,
        "autoRenew" BOOLEAN NOT NULL DEFAULT false,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "subscriptions_pkey" PRIMARY KEY ("id")
      );

      -- BoardPost ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."board_posts" (
        "id" TEXT NOT NULL,
        "category" "public"."BoardCategory" NOT NULL,
        "title" VARCHAR(200) NOT NULL,
        "content" TEXT NOT NULL,
        "authorName" VARCHAR(40) NOT NULL,
        "authorId" TEXT,
        "isImportant" BOOLEAN NOT NULL DEFAULT false,
        "viewCount" INTEGER NOT NULL DEFAULT 0,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        "deletedAt" TIMESTAMP(3),
        CONSTRAINT "board_posts_pkey" PRIMARY KEY ("id")
      );

      -- RecommendationHistory ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."recommendation_history" (
        "id" TEXT NOT NULL,
        "round" INTEGER,
        "numbers" JSONB NOT NULL,
        "type" "public"."RecommendationType" NOT NULL,
        "conditions" JSONB,
        "imageData" JSONB,
        "gptModel" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        "analysis" TEXT,
        "userId" TEXT,
        CONSTRAINT "recommendation_history_pkey" PRIMARY KEY ("id")
      );

      -- RecommendationReview ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."recommendation_review" (
        "id" TEXT NOT NULL,
        "recommendationId" TEXT NOT NULL,
        "winningNumbers" JSONB NOT NULL,
        "matchedCounts" JSONB NOT NULL,
        "reviewText" TEXT NOT NULL,
        "analysisPrompt" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "recommendation_review_pkey" PRIMARY KEY ("id")
      );

      -- WinningNumbers ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."winning_numbers" (
        "id" TEXT NOT NULL,
        "round" INTEGER NOT NULL,
        "numbers" JSONB NOT NULL,
        "drawDate" TIMESTAMP(3) NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        "bonusNumber" INTEGER NOT NULL,
        "firstWinningAmount" BIGINT NOT NULL,
        CONSTRAINT "winning_numbers_pkey" PRIMARY KEY ("id")
      );

      -- ApiUsage ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."api_usage" (
        "id" TEXT NOT NULL,
        "endpoint" TEXT NOT NULL,
        "gptModel" TEXT,
        "tokenUsed" INTEGER,
        "cost" DOUBLE PRECISION,
        "responseTime" INTEGER,
        "success" BOOLEAN NOT NULL DEFAULT true,
        "errorMessage" TEXT,
        "userIp" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "api_usage_pkey" PRIMARY KEY ("id")
      );

      -- IPLimitRecord ÌÖåÏù¥Î∏î
      CREATE TABLE IF NOT EXISTS "public"."ip_limit_records" (
        "id" TEXT NOT NULL,
        "ipAddress" TEXT NOT NULL,
        "lastRequestDate" TEXT NOT NULL,
        "requestCount" INTEGER NOT NULL DEFAULT 0,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "ip_limit_records_pkey" PRIMARY KEY ("id")
      );
    `;

    await mainClient.query(createTablesSQL);
    console.log('‚úÖ ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å');

    // 4. Ïù∏Îç±Ïä§ ÏÉùÏÑ±
    const createIndexesSQL = `
      -- Orders Ïù∏Îç±Ïä§
      CREATE INDEX IF NOT EXISTS "orders_userId_idx" ON "public"."orders"("userId");
      CREATE INDEX IF NOT EXISTS "orders_merchantUid_idx" ON "public"."orders"("merchantUid");
      CREATE INDEX IF NOT EXISTS "orders_status_idx" ON "public"."orders"("status");
      CREATE INDEX IF NOT EXISTS "orders_createdAt_idx" ON "public"."orders"("createdAt");

      -- Payments Ïù∏Îç±Ïä§
      CREATE INDEX IF NOT EXISTS "payments_impUid_idx" ON "public"."payments"("impUid");
      CREATE INDEX IF NOT EXISTS "payments_status_idx" ON "public"."payments"("status");
      CREATE INDEX IF NOT EXISTS "payments_paidAt_idx" ON "public"."payments"("paidAt");

      -- BoardPosts Ïù∏Îç±Ïä§
      CREATE INDEX IF NOT EXISTS "board_posts_category_idx" ON "public"."board_posts"("category");
      CREATE INDEX IF NOT EXISTS "board_posts_isImportant_idx" ON "public"."board_posts"("isImportant");
      CREATE INDEX IF NOT EXISTS "board_posts_createdAt_idx" ON "public"."board_posts"("createdAt");
      CREATE INDEX IF NOT EXISTS "board_posts_authorId_idx" ON "public"."board_posts"("authorId");

      -- IPLimitRecords Ïù∏Îç±Ïä§
      CREATE INDEX IF NOT EXISTS "ip_limit_records_ipAddress_lastRequestDate_idx" ON "public"."ip_limit_records"("ipAddress", "lastRequestDate");

      -- SocialAccounts Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."social_accounts" ADD CONSTRAINT IF NOT EXISTS "social_accounts_provider_providerUid_key" UNIQUE ("provider", "providerUid");

      -- RefreshTokens Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."refresh_tokens" ADD CONSTRAINT IF NOT EXISTS "refresh_tokens_tokenHash_key" UNIQUE ("tokenHash");

      -- Orders Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."orders" ADD CONSTRAINT IF NOT EXISTS "orders_merchantUid_key" UNIQUE ("merchantUid");

      -- Payments Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."payments" ADD CONSTRAINT IF NOT EXISTS "payments_orderId_key" UNIQUE ("orderId");
      ALTER TABLE "public"."payments" ADD CONSTRAINT IF NOT EXISTS "payments_impUid_key" UNIQUE ("impUid");

      -- WinningNumbers Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."winning_numbers" ADD CONSTRAINT IF NOT EXISTS "winning_numbers_round_key" UNIQUE ("round");

      -- IPLimitRecords Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
      ALTER TABLE "public"."ip_limit_records" ADD CONSTRAINT IF NOT EXISTS "ip_limit_records_ipAddress_key" UNIQUE ("ipAddress");
    `;

    await mainClient.query(createIndexesSQL);
    console.log('‚úÖ Ïù∏Îç±Ïä§ ÏÉùÏÑ± ÏôÑÎ£å');

    // 5. Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Ï∂îÍ∞Ä
    const createForeignKeysSQL = `
      -- SocialAccounts Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."social_accounts" ADD CONSTRAINT IF NOT EXISTS "social_accounts_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

      -- RefreshTokens Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."refresh_tokens" ADD CONSTRAINT IF NOT EXISTS "refresh_tokens_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

      -- Orders Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."orders" ADD CONSTRAINT IF NOT EXISTS "orders_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

      -- Payments Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."payments" ADD CONSTRAINT IF NOT EXISTS "payments_orderId_fkey" 
        FOREIGN KEY ("orderId") REFERENCES "public"."orders"("id") ON DELETE CASCADE ON UPDATE CASCADE;

      -- Subscriptions Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."subscriptions" ADD CONSTRAINT IF NOT EXISTS "subscriptions_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

      -- BoardPosts Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."board_posts" ADD CONSTRAINT IF NOT EXISTS "board_posts_authorId_fkey" 
        FOREIGN KEY ("authorId") REFERENCES "public"."users"("id") ON DELETE SET NULL ON UPDATE CASCADE;

      -- RecommendationHistory Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."recommendation_history" ADD CONSTRAINT IF NOT EXISTS "recommendation_history_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE SET NULL ON UPDATE CASCADE;

      -- RecommendationReview Ïô∏ÎûòÌÇ§
      ALTER TABLE "public"."recommendation_review" ADD CONSTRAINT IF NOT EXISTS "recommendation_review_recommendationId_fkey" 
        FOREIGN KEY ("recommendationId") REFERENCES "public"."recommendation_history"("id") ON DELETE CASCADE ON UPDATE CASCADE;
    `;

    await mainClient.query(createForeignKeysSQL);
    console.log('‚úÖ Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Ï∂îÍ∞Ä ÏôÑÎ£å');

    await mainClient.end();
    console.log('‚úÖ ÌÅ¥ÎùºÏö∞ÎìúÌÉÄÏûÖ PostgreSQL ÏÑ§Ï†ï ÏôÑÎ£å!');

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
    process.exit(1);
  }
}

createCloudTypeDatabase(); 